{"ast":null,"code":"import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport userActionTypes from \"./user.types\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { emailSignInFailure, emailSignInSuccess, googleSignInFailure, googleSignInSuccess } from \"./user.actions\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nconst auth = getAuth();\nexport function* signInWithGoogle() {\n  console.log(\"im fired\");\n\n  try {\n    const provider = new GoogleAuthProvider();\n    provider.setCustomParameters({\n      prompt: \"select_account\"\n    });\n    const {\n      user\n    } = yield signInWithPopup(auth, provider);\n    const userRef = yield call(createUserProfileDocument, user);\n    yield put(googleSignInSuccess({\n      id: userRef.id,\n      ...userRef.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    console.log(user); // yield put(emailSignInSuccess({ id: userRef.id, ...userRef.data() }))\n  } catch (error) {// yield put(emailSignInFailure(error))\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/mustafa/Desktop/project/crwn-clothing/src/redux/user/user.saga.js"],"names":["all","takeLatest","call","put","userActionTypes","getAuth","GoogleAuthProvider","signInWithPopup","createUserProfileDocument","emailSignInFailure","emailSignInSuccess","googleSignInFailure","googleSignInSuccess","signInWithEmailAndPassword","auth","signInWithGoogle","console","log","provider","setCustomParameters","prompt","user","userRef","id","data","error","signInWithEmail","payload","email","password","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,eAAtC,QAA6D,eAA7D;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,mBAAjD,EAAsEC,mBAAtE,QAAiG,gBAAjG;AAEA,SAASC,0BAAT,QAA2C,eAA3C;AAGA,MAAMC,IAAI,GAAGT,OAAO,EAApB;AAEA,OAAO,UAAUU,gBAAV,GAA6B;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,IAAIZ,kBAAJ,EAAjB;AACAY,IAAAA,QAAQ,CAACC,mBAAT,CAA6B;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA7B;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMd,eAAe,CAACO,IAAD,EAAOI,QAAP,CAAtC;AACA,UAAMI,OAAO,GAAG,MAAMpB,IAAI,CAACM,yBAAD,EAA4Ba,IAA5B,CAA1B;AACA,UAAMlB,GAAG,CAACS,mBAAmB,CAAC;AAAEW,MAAAA,EAAE,EAAED,OAAO,CAACC,EAAd;AAAkB,SAAGD,OAAO,CAACE,IAAR;AAArB,KAAD,CAApB,CAAT;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACd,UAAMtB,GAAG,CAACQ,mBAAmB,CAACc,KAAD,CAApB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAASC,IAAAA;AAAT;AAAT,CAA1B,EAAwD;AAE7D,MAAG;AACD,UAAM;AAACR,MAAAA;AAAD,QAAS,MAAMR,0BAA0B,CAACC,IAAD,EAAOc,KAAP,EAAcC,QAAd,CAA/C;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ,EAFC,CAGD;AACD,GAJD,CAIC,OAAMI,KAAN,EAAY,CACX;AACD;AACF;AAED,OAAO,UAAUK,mBAAV,GAAgC;AACrC,QAAM7B,UAAU,CAACG,eAAe,CAAC2B,oBAAjB,EAAuChB,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUiB,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACG,eAAe,CAAC6B,mBAAjB,EAAsCP,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAMlC,GAAG,CAAC,CAACE,IAAI,CAAC4B,mBAAD,CAAL,EAA2B5B,IAAI,CAAC8B,kBAAD,CAA/B,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, call, put } from \"redux-saga/effects\";\r\nimport userActionTypes from \"./user.types\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport { createUserProfileDocument } from \"../../firebase/firebase.utils\";\r\nimport { emailSignInFailure, emailSignInSuccess, googleSignInFailure, googleSignInSuccess } from \"./user.actions\";\r\n\r\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\r\n\r\n\r\nconst auth = getAuth();\r\n\r\nexport function* signInWithGoogle() {\r\n  console.log(\"im fired\");\r\n  try {\r\n    const provider = new GoogleAuthProvider();\r\n    provider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\n    const { user } = yield signInWithPopup(auth, provider);\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    yield put(googleSignInSuccess({ id: userRef.id, ...userRef.data() }));\r\n  } catch (error) {\r\n    yield put(googleSignInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({payload:{email , password}}) {\r\n\r\n  try{\r\n    const {user} = yield signInWithEmailAndPassword(auth ,email ,password)\r\n    console.log(user);\r\n    // yield put(emailSignInSuccess({ id: userRef.id, ...userRef.data() }))\r\n  }catch(error){\r\n    // yield put(emailSignInFailure(error))\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([call(onGoogleSignInStart),call(onEmailSignInStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}