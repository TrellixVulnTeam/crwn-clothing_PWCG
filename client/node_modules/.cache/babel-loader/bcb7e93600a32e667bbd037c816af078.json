{"ast":null,"code":"import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\nconst auth = getAuth();\nexport function* getSnapshotFromUserAuth(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user);\n    yield put(signInSuccess({\n      id: userRef.id,\n      ...userRef.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const provider = new GoogleAuthProvider();\n    provider.setCustomParameters({\n      prompt: \"select_account\"\n    });\n    const {\n      user\n    } = yield signInWithPopup(auth, provider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {} catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["C:/Users/mustafa/Desktop/project/crwn-clothing/src/redux/user/user.saga.js"],"names":["all","takeLatest","call","put","getAuth","GoogleAuthProvider","signInWithPopup","signInWithEmailAndPassword","createUserProfileDocument","signInFailure","signInSuccess","userActionTypes","auth","getSnapshotFromUserAuth","user","userRef","id","data","error","signInWithGoogle","provider","setCustomParameters","prompt","signInWithEmail","payload","email","password","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,eAAtC,QAA6D,eAA7D;AACA,SAASC,0BAAT,QAA2C,eAA3C;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAGA,MAAMC,IAAI,GAAGR,OAAO,EAApB;AAEA,OAAO,UAAUS,uBAAV,CAAkCC,IAAlC,EAAwC;AAC7C,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMb,IAAI,CAACM,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMX,GAAG,CAACO,aAAa,CAAC;AAAEM,MAAAA,EAAE,EAAED,OAAO,CAACC,EAAd;AAAkB,SAAGD,OAAO,CAACE,IAAR;AAArB,KAAD,CAAd,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMf,GAAG,CAACM,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAMC,QAAQ,GAAG,IAAIf,kBAAJ,EAAjB;AACAe,IAAAA,QAAQ,CAACC,mBAAT,CAA6B;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA7B;AACA,UAAM;AAAER,MAAAA;AAAF,QAAW,MAAMR,eAAe,CAACM,IAAD,EAAOQ,QAAP,CAAtC;AAEC,UAAMP,uBAAuB,CAACC,IAAD,CAA7B;AACF,GAND,CAME,OAAOI,KAAP,EAAc;AACd,UAAMf,GAAG,CAACM,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUK,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAASC,IAAAA;AAAT;AAAT,CAA1B,EAAwD;AAC7D,MAAG;AACD,UAAM;AAACZ,MAAAA;AAAD,QAAS,MAAMP,0BAA0B,CAACK,IAAD,EAAOa,KAAP,EAAcC,QAAd,CAA/C;AAED,UAAMb,uBAAuB,CAACC,IAAD,CAA7B;AACA,GAJD,CAIC,OAAMI,KAAN,EAAY;AACX,UAAMf,GAAG,CAACM,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACrC,MAAG,CACF,CADD,CACC,OAAMT,KAAN,EAAY;AACX,UAAMf,GAAG,CAACM,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAGD,OAAO,UAAUU,mBAAV,GAAgC;AACrC,QAAM3B,UAAU,CAACU,eAAe,CAACkB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUW,kBAAV,GAA+B;AACpC,QAAM7B,UAAU,CAACU,eAAe,CAACoB,mBAAjB,EAAsCR,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUS,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACU,eAAe,CAACsB,kBAAjB,EAAqCN,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUO,SAAV,GAAsB;AAC3B,QAAMlC,GAAG,CAAC,CAACE,IAAI,CAAC0B,mBAAD,CAAL,EAA2B1B,IAAI,CAAC4B,kBAAD,CAA/B,EAAoD5B,IAAI,CAAC8B,kBAAD,CAAxD,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, call, put } from \"redux-saga/effects\";\r\n\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport { createUserProfileDocument } from \"../../firebase/firebase.utils\";\r\n\r\nimport { signInFailure, signInSuccess } from \"./user.actions\";\r\n\r\nimport userActionTypes from \"./user.types\";\r\n\r\n\r\nconst auth = getAuth();\r\n\r\nexport function* getSnapshotFromUserAuth(user) {\r\n  try {\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    yield put(signInSuccess({ id: userRef.id, ...userRef.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const provider = new GoogleAuthProvider();\r\n    provider.setCustomParameters({ prompt: \"select_account\" });\r\n    const { user } = yield signInWithPopup(auth, provider);\r\n\r\n     yield getSnapshotFromUserAuth(user)\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({payload:{email , password}}) {\r\n  try{\r\n    const {user} = yield signInWithEmailAndPassword(auth ,email ,password)\r\n    \r\n   yield getSnapshotFromUserAuth(user)\r\n  }catch(error){\r\n    yield put(signInFailure(error))\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try{\r\n  }catch(error){\r\n    yield put(signInFailure(error))\r\n  }\r\n}\r\n\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(onCheckUserSession)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}