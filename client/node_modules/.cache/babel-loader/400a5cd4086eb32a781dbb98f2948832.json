{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { collection, doc, getDoc, getFirestore, setDoc, writeBatch } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAfWKQQsrDJngAVnfnQEZtAFYrRlMVYZaY\",\n  authDomain: \"crown-clothing-9ffa8.firebaseapp.com\",\n  projectId: \"crown-clothing-9ffa8\",\n  storageBucket: \"crown-clothing-9ffa8.appspot.com\",\n  messagingSenderId: \"133838497942\",\n  appId: \"1:133838497942:web:f791c6b52c03125a773ab7\",\n  measurementId: \"G-FR975M0JED\"\n}; // Initialize Firebase\n\ninitializeApp(firebaseConfig);\nconst db = getFirestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = doc(db, \"users\", userAuth.uid);\n\n  try {\n    const snapShot = await getDoc(userRef);\n    console.log(\"userAuth\", snapShot);\n\n    if (!snapShot.exists()) {\n      const {\n        displayName,\n        email\n      } = userAuth;\n      const createdAt = new Date();\n\n      try {\n        setDoc(userRef, {\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        });\n      } catch (e) {\n        console.error(\"error while setting user data in firestore\", e);\n      }\n    }\n\n    return snapShot;\n  } catch (e) {\n    console.log(\"firebase err\", e === null || e === void 0 ? void 0 : e.message);\n  }\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(obj => {\n    const newDocRef = doc(collectionRef);\n    batch.set(newDocRef, obj);\n  });\n  batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      items,\n      title\n    };\n  });\n  return transformedCollection.reduce((accmulator, collection) => {\n    accmulator[collection === null || collection === void 0 ? void 0 : collection.title.toLowerCase()] = collection;\n    return accmulator;\n  }, {});\n};\nexport const auth = getAuth(); // export const firestore = firebase.firestore();\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => signInWithPopup(auth, provider).then(res => console.log(res)).catch(e => console.error(\"google sign in error\", e)); // export default firebase;","map":{"version":3,"sources":["C:/Users/mustafa/Desktop/project/crwn-clothing/src/firebase/firebase.utils.js"],"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","collection","doc","getDoc","getFirestore","setDoc","writeBatch","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapShot","console","log","exists","displayName","email","createdAt","Date","e","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","set","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accmulator","auth","provider","setCustomParameters","prompt","signInWithGoogle","then","res","catch"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,eAAtC,QAA6D,eAA7D;AACA,SACEC,UADF,EAEEC,GAFF,EAGEC,MAHF,EAIEC,YAJF,EAKEC,MALF,EAMEC,UANF,QAOO,oBAPP;AASA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,sCAFS;AAGrBC,EAAAA,SAAS,EAAE,sBAHU;AAIrBC,EAAAA,aAAa,EAAE,kCAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB,C,CAUA;;AACAjB,aAAa,CAACU,cAAD,CAAb;AAEA,MAAMQ,EAAE,GAAGX,YAAY,EAAvB;AAEA,OAAO,MAAMY,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,OAAO,GAAGjB,GAAG,CAACa,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACG,GAAvB,CAAnB;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMlB,MAAM,CAACgB,OAAD,CAA7B;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;;AAEA,QAAI,CAACA,QAAQ,CAACG,MAAT,EAAL,EAAwB;AACtB,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAAyBT,QAA/B;AACA,YAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,UAAI;AACFvB,QAAAA,MAAM,CAACc,OAAD,EAAU;AACdM,UAAAA,WADc;AAEdC,UAAAA,KAFc;AAGdC,UAAAA,SAHc;AAId,aAAGT;AAJW,SAAV,CAAN;AAMD,OAPD,CAOE,OAAOW,CAAP,EAAU;AACVP,QAAAA,OAAO,CAACQ,KAAR,CAAc,4CAAd,EAA4DD,CAA5D;AACD;AACF;;AACD,WAAOR,QAAP;AACD,GApBD,CAoBE,OAAOQ,CAAP,EAAU;AACVP,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BM,CAA5B,aAA4BA,CAA5B,uBAA4BA,CAAC,CAAEE,OAA/B;AACD;AACF,CA1BM;AA4BP,OAAO,MAAMC,yBAAyB,GAAG,OACvCC,aADuC,EAEvCC,YAFuC,KAGpC;AACH,QAAMC,aAAa,GAAGlC,UAAU,CAACc,EAAD,EAAKkB,aAAL,CAAhC;AAEA,QAAMG,KAAK,GAAG9B,UAAU,CAACS,EAAD,CAAxB;AAEAmB,EAAAA,YAAY,CAACG,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAMC,SAAS,GAAGrC,GAAG,CAACiC,aAAD,CAArB;AACAC,IAAAA,KAAK,CAACI,GAAN,CAAUD,SAAV,EAAqBD,GAArB;AACD,GAHD;AAIAF,EAAAA,KAAK,CAACK,MAAN;AACD,CAbM;AAeP,OAAO,MAAMC,+BAA+B,GAAIC,WAAD,IAAiB;AAC9D,QAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAsB5C,GAAD,IAAS;AAC1D,UAAM;AAAE6C,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmB9C,GAAG,CAAC+C,IAAJ,EAAzB;AAEA,WAAO;AACLC,MAAAA,SAAS,EAAEC,SAAS,CAACJ,KAAK,CAACK,WAAN,EAAD,CADf;AAELC,MAAAA,EAAE,EAAEnD,GAAG,CAACmD,EAFH;AAGLL,MAAAA,KAHK;AAILD,MAAAA;AAJK,KAAP;AAMD,GAT6B,CAA9B;AAWA,SAAOH,qBAAqB,CAACU,MAAtB,CAA6B,CAACC,UAAD,EAAatD,UAAb,KAA4B;AAC9DsD,IAAAA,UAAU,CAACtD,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAE8C,KAAZ,CAAkBK,WAAlB,EAAD,CAAV,GAA8CnD,UAA9C;AACA,WAAOsD,UAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CAhBM;AAkBP,OAAO,MAAMC,IAAI,GAAG1D,OAAO,EAApB,C,CACP;;AAEA,MAAM2D,QAAQ,GAAG,IAAI1D,kBAAJ,EAAjB;AAEA0D,QAAQ,CAACC,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAC9B5D,eAAe,CAACwD,IAAD,EAAOC,QAAP,CAAf,CACGI,IADH,CACSC,GAAD,IAASxC,OAAO,CAACC,GAAR,CAAYuC,GAAZ,CADjB,EAEGC,KAFH,CAEUlC,CAAD,IAAOP,OAAO,CAACQ,KAAR,CAAc,sBAAd,EAAsCD,CAAtC,CAFhB,CADK,C,CAKP","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getFirestore,\r\n  setDoc,\r\n  writeBatch,\r\n} from \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAfWKQQsrDJngAVnfnQEZtAFYrRlMVYZaY\",\r\n  authDomain: \"crown-clothing-9ffa8.firebaseapp.com\",\r\n  projectId: \"crown-clothing-9ffa8\",\r\n  storageBucket: \"crown-clothing-9ffa8.appspot.com\",\r\n  messagingSenderId: \"133838497942\",\r\n  appId: \"1:133838497942:web:f791c6b52c03125a773ab7\",\r\n  measurementId: \"G-FR975M0JED\",\r\n};\r\n\r\n// Initialize Firebase\r\ninitializeApp(firebaseConfig);\r\n\r\nconst db = getFirestore();\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n  const userRef = doc(db, \"users\", userAuth.uid);\r\n  try {\r\n    const snapShot = await getDoc(userRef);\r\n\r\n    console.log(\"userAuth\", snapShot);\r\n\r\n    if (!snapShot.exists()) {\r\n      const { displayName, email } = userAuth;\r\n      const createdAt = new Date();\r\n      try {\r\n        setDoc(userRef, {\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData,\r\n        });\r\n      } catch (e) {\r\n        console.error(\"error while setting user data in firestore\", e);\r\n      }\r\n    }\r\n    return snapShot;\r\n  } catch (e) {\r\n    console.log(\"firebase err\", e?.message);\r\n  }\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  const collectionRef = collection(db, collectionKey);\r\n\r\n  const batch = writeBatch(db);\r\n\r\n  objectsToAdd.forEach((obj) => {\r\n    const newDocRef = doc(collectionRef);\r\n    batch.set(newDocRef, obj);\r\n  });\r\n  batch.commit();\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      items,\r\n      title,\r\n    };\r\n  });\r\n\r\n  return transformedCollection.reduce((accmulator, collection) => {\r\n    accmulator[collection?.title.toLowerCase()] = collection;\r\n    return accmulator;\r\n  }, {});\r\n};\r\n\r\nexport const auth = getAuth();\r\n// export const firestore = firebase.firestore();\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\nexport const signInWithGoogle = () =>\r\n  signInWithPopup(auth, provider)\r\n    .then((res) => console.log(res))\r\n    .catch((e) => console.error(\"google sign in error\", e));\r\n\r\n// export default firebase;\r\n"]},"metadata":{},"sourceType":"module"}